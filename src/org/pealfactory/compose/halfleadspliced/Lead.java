package org.pealfactory.compose.halfleadspliced;

/**
 * Represents a generated lead of the composition. For the half-lead search,
 * this is nominally two half-leads, but since Indis, is now considered as a single
 * indivisible lead generated by a composite method. A table of Lead instances
 * is kept by the {@link Composition} class; they are also used by
 * {@link OutputComp}.
 * <p>
 * Note this class is performance-sensitive, so should not be modified without
 * extensive benchmarking of a range of searches.
 *
 * @author MBD
 */
class Lead
{
  private Method fComposite;
	private int fIndex;
	private int fCall;
	private RowNode fLast;

	public Lead()
	{
	}

	/**
	 * Final for speed (inlining)
	 */
	public final void setLead(RowNode start, Method composite, int call)
	{
		fComposite = composite;
		fIndex = composite.getMethodIndex();
		fCall = call;
		fLast = start.permute(composite.getLeadPermNum(call));
	}

	/**
	 * If lhOnly set, print "C" instead of "CC".
	 */
	public String toString(boolean lhOnly)
	{
		StringBuffer s = new StringBuffer(fLast.toString().substring(1));
		s.append(" ");
		String abbrev = fComposite.getAbbrev();
		if (lhOnly)
			abbrev = abbrev.substring(0, 1);
		s.append(abbrev);
		if (fCall>0)
			if (fCall==1)
				s.append("-");
			else
				s.append("s");
		return s.toString();
	}

	/**
	 * Final for speed (inlining)
	 */
	public final Method getMethod()
	{
		return fComposite;
	}

	/**
	 * Final for speed (inlining)
	 */
	public final int getCall()
	{
		return fCall;
	}

	/**
	 * Final for speed (inlining)
	 */
	public final RowNode getLastRow()
	{
		return fLast;
	}

}
